#ifndef CM_SEGMENT_TREE
#define CM_SEGMENT_TREE
#include <vector>
namespace cm{template<bool _1=false>struct segment_tree_node_base{static constexpr bool have_push_down=false;segment_tree_node_base()=default;segment_tree_node_base(int){}segment_tree_node_base(const segment_tree_node_base&,const segment_tree_node_base&){}void push_down(segment_tree_node_base&,segment_tree_node_base&){}};template<>struct segment_tree_node_base<true>{static constexpr bool have_push_down=true;segment_tree_node_base()=default;segment_tree_node_base(int){}segment_tree_node_base(const segment_tree_node_base&,const segment_tree_node_base&){}};template<class _c>struct segment_tree{protected:int l=0,r=0;std::vector<_c>p;void _6(int u,int l,int r){if(r-l==1){p[u]=_c(l);}else{int _d=l+(r-l)/2;_6(u+1,l,_d);_6(u+(_d-l)*2,_d,r);p[u]=_c(p[u+1],p[u+(_d-l)*2]);}}template<class..._8>void _3(int u,int l,int r,int ml,int mr,void(_c::*_b)(_8...),_8..._9){if(ml<=l&&r<=mr){(p[u].*_b)(_9...);}else{int _d=l+(r-l)/2;if(_c::have_push_down)p[u].push_down(p[u+1],p[u+(_d-l)*2]);if(ml<_d)_3(u+1,l,_d,ml,mr,_b,_9...);if(mr>_d)_3(u+(_d-l)*2,_d,r,ml,mr,_b,_9...);p[u]=_c(p[u+1],p[u+(_d-l)*2]);}}_c _a(int u,int l,int r,int ql,int qr){if(ql<=l&&r<=qr){return p[u];}else{int _d=l+(r-l)/2;if(_c::have_push_down)p[u].push_down(p[u+1],p[u+(_d-l)*2]);if(qr<=_d)return _a(u+1,l,_d,ql,qr);else if(ql>=_d)return _a(u+(_d-l)*2,_d,r,ql,qr);else return _c(_a(u+1,l,_d,ql,qr),_a(u+(_d-l)*2,_d,r,ql,qr));}}template<class _4>int _5(int u,int l,int r,_4 _b,_c _7){if(r-l==1){return l;}else{int _d=l+(r-l)/2;if(_c::have_push_down)p[u].push_down(p[u+1],p[u+(_d-l)*2]);_c _2=_c(_7,p[u+1]);if(_b(_2))return _5(u+(_d-l)*2,_d,r,_b,_2);else return _5(u+1,l,_d,_b,_7);}}public:segment_tree()=default;explicit segment_tree(int r):l(0),r(r),p((r-l)*2-1){_6(0,l,r);}segment_tree(int l,int r):l(l),r(r),p((r-l)*2-1){_6(0,l,r);}template<class..._8>void modify(int ml,int mr,void(_c::*_b)(_8...),_8..._9){
#ifdef CM_DEBUG_H
cm_assert(ml>=l,l,r,ml,mr);cm_assert(mr<=r,l,r,ml,mr);cm_assert(ml<mr,l,r,ml,mr);
#endif
if(ml<mr)_3(0,l,r,ml,mr,_b,_9...);}_c query(int ql,int qr){
#ifdef CM_DEBUG_H
cm_assert(ql>=l,l,r,ql,qr);cm_assert(qr<=r,l,r,ql,qr);cm_assert(ql<=qr,l,r,ql,qr);
#endif
if(ql>=qr)return _c();else return _a(0,l,r,ql,qr);}template<class _4>int lower_bound(_4 _b,_c _7=_c()){if(_b(p[0]))return r;else return _5(0,l,r,_b,_7);}};}
#endif
