#ifndef CM_INTM_H
#define CM_INTM_H
#if __cplusplus >= 201103L
#include <type_traits>
#endif
#include <iostream>
#include <limits>
#ifndef INTM_FAST_32
#define INTM_FAST_32 int
#endif
#ifndef INTM_FAST_64
#define INTM_FAST_64 unsigned long long
#endif
#define _7 __attribute__((always_inline)) inline
#if __cplusplus >= 201103L
#define _6 constexpr
#define CXX11_EXPLICIT explicit
#else
#define _6
#define CXX11_EXPLICIT
#endif
#if __cplusplus >= 201402L
#define _5 constexpr
#else
#define _5
#endif
namespace cm{template<INTM_FAST_32 _2=998244353>class intm{
#if __cplusplus >= 201103L
static_assert(_2*2<std::numeric_limits<INTM_FAST_32>::max(),"");
#endif
public:static constexpr int MOD=_2;protected:INTM_FAST_32 a=0;_7 _6 explicit intm(INTM_FAST_32 a,int):a(a){}static _7 _6 INTM_FAST_32 _4(INTM_FAST_32 a){return a<0?a+MOD:a;}static _7 _6 INTM_FAST_32 _1(INTM_FAST_32 a){return a>=MOD?a-MOD:a;}template<class IntType>static _7 _5 INTM_FAST_32 _3(INTM_FAST_32 a,IntType b){INTM_FAST_32 res=1;for(;b;b>>=1){if(b&1){res=(INTM_FAST_32)((INTM_FAST_64)(res)*(INTM_FAST_64)(a)%MOD);}a=(INTM_FAST_32)((INTM_FAST_64)(a)*(INTM_FAST_64)(a)%MOD);}return res;}static int pretty(int x){if(x>=MOD-1000)return x-MOD;return x;}public:
#if __cplusplus >= 201103L
intm()=default;
#else
intm(){}
#endif
static _6 intm raw(INTM_FAST_32 x){return intm(x,0);}_7 _6 intm(int a):a(static_cast<INTM_FAST_32>(_4(a%MOD))){}_7 _6 intm(long a):a(static_cast<INTM_FAST_32>(_4(a%MOD))){}_7 _6 intm(long long a):a(static_cast<INTM_FAST_32>(_4(a%MOD))){}_7 _6 intm(unsigned int a):a(static_cast<INTM_FAST_32>(a%MOD)){}_7 _6 intm(unsigned long a):a(static_cast<INTM_FAST_32>(a%MOD)){}_7 _6 intm(unsigned long long a):a(static_cast<INTM_FAST_32>(a%MOD)){}template<class _8>_7 _6 CXX11_EXPLICIT operator _8()const{return a;}_7 friend std::ostream&operator<<(std::ostream&out,const intm rhs){
#ifdef CM_DEBUG
out<<pretty(rhs.a);return out;
#else
out<<rhs.a;return out;
#endif
}_7 friend std::istream&operator>>(std::istream&in,intm&rhs){long long a;in>>a;rhs=intm(a);return in;}template<class _8>_7 _5 intm pow(_8 k)const{return raw(_3(a,k));}_7 _5 intm inv()const{
#ifdef CM_DEBUG_H
cm_assert(a!=0,"warning:0 do not have inv");
#endif
return raw(_3(a,MOD-2));}_7 _6 friend bool operator<(const intm a,const intm b){return a.a<b.a;}_7 _6 friend bool operator<=(const intm a,const intm b){return a.a<=b.a;}_7 _6 friend bool operator>(const intm a,const intm b){return a.a>b.a;}_7 _6 friend bool operator>=(const intm a,const intm b){return a.a>=b.a;}_7 _6 friend bool operator==(const intm a,const intm b){return a.a==b.a;}_7 _6 friend bool operator!=(const intm a,const intm b){return a.a!=b.a;}template<class _8>_7 _6 friend bool operator<(const _8 a,const intm b){return a<b.a;}template<class _8>_7 _6 friend bool operator<(const intm a,const _8 b){return a.a<b;}template<class _8>_7 _6 friend bool operator<=(const _8 a,const intm b){return a<=b.a;}template<class _8>_7 _6 friend bool operator<=(const intm a,const _8 b){return a.a<=b;}template<class _8>_7 _6 friend bool operator>(const _8 a,const intm b){return a>b.a;}template<class _8>_7 _6 friend bool operator>(const intm a,const _8 b){return a.a>b;}template<class _8>_7 _6 friend bool operator>=(const _8 a,const intm b){return a>=b.a;}template<class _8>_7 _6 friend bool operator>=(const intm a,const _8 b){return a.a>=b;}template<class _8>_7 _6 friend bool operator==(const _8 a,const intm b){return a==b.a;}template<class _8>_7 _6 friend bool operator==(const intm a,const _8 b){return a.a==b;}template<class _8>_7 _6 friend bool operator!=(const _8 a,const intm b){return a!=b.a;}template<class _8>_7 _6 friend bool operator!=(const intm a,const _8 b){return a.a!=b;}_7 _6 friend intm operator+(const intm a,const intm b){return raw(_1(a.a+b.a));}_7 _6 friend intm operator-(const intm a,const intm b){return raw(_4(a.a-b.a));}_7 _6 friend intm operator*(const intm a,const intm b){return raw(static_cast<INTM_FAST_32>((INTM_FAST_64)(a.a)*(INTM_FAST_64)(b.a)%MOD));}_7 _5 friend intm operator/(const intm a,const intm b){return a*b.inv();}_7 _6 friend intm&operator+=(intm&a,const intm b){return a=a+b;}_7 _6 friend intm&operator-=(intm&a,const intm b){return a=a-b;}_7 _6 friend intm&operator*=(intm&a,const intm b){return a=a*b;}_7 _5 friend intm&operator/=(intm&a,const intm b){return a=a/b;}template<class _8>_7 _6 friend intm operator+(const intm a,const _8 b){return a+intm(b);}template<class _8>_7 _6 friend intm operator-(const intm a,const _8 b){return a-intm(b);}template<class _8>_7 _6 friend intm operator*(const intm a,const _8 b){return a*intm(b);}template<class _8>_7 _5 friend intm operator/(const intm a,const _8 b){return a/intm(b);}template<class _8>_7 _6 friend intm&operator+=(intm&a,const _8 b){return a+=intm(b);}template<class _8>_7 _6 friend intm&operator-=(intm&a,const _8 b){return a-=intm(b);}template<class _8>_7 _6 friend intm&operator*=(intm&a,const _8 b){return a*=intm(b);}template<class _8>_7 _5 friend intm&operator/=(intm&a,const _8 b){return a/=intm(b);}template<class _8>_7 _6 friend intm operator+(const _8 a,const intm b){return intm(a)+b;}template<class _8>_7 _6 friend intm operator-(const _8 a,const intm b){return intm(a)-b;}template<class _8>_7 _6 friend intm operator*(const _8 a,const intm b){return intm(a)*b;}template<class _8>_7 _5 friend intm operator/(const _8 a,const intm b){return intm(a)/b;}template<class _8>_7 _6 friend _8&operator+=(_8&a,const intm b){return a+=_8(b);}template<class _8>_7 _6 friend _8&operator-=(_8&a,const intm b){return a-=_8(b);}template<class _8>_7 _6 friend _8&operator*=(_8&a,const intm b){return a*=_8(b);}template<class _8>_7 _5 friend _8&operator/=(_8&a,const intm b){return a/=_8(b);}};}
#undef _7
#undef _6
#undef _5
#undef INTM_FAST_32
#undef INTM_FAST_64
#endif
