#ifndef CM_INTM_H_
#define CM_INTM_H_ 1
#if __cplusplus >= 201103L
#include <type_traits>
#endif
#include <limits>
#include <iostream>
#ifndef INTM_FAST_32
#define INTM_FAST_32 int
#endif
#ifndef INTM_FAST_64
#define INTM_FAST_64 unsigned long long
#endif
#define _6 __attribute__ ((always_inline)) inline
#if __cplusplus >= 201103L
#define _5 constexpr
#define CXX11_EXPLICIT  explicit
#else
#define _5
#define CXX11_EXPLICIT
#endif
#if __cplusplus >= 201402L
#define _4 constexpr
#else
#define _4
#endif
namespace cm{template<INTM_FAST_32 MOD=998244353>class intm{
#if __cplusplus >= 201103L
static_assert(MOD*2<std::numeric_limits<INTM_FAST_32>::max(),"");
#endif
protected:INTM_FAST_32 a=0;_6 _5 explicit intm(INTM_FAST_32 a,int):a(a){}static _6 _5 INTM_FAST_32 _3(INTM_FAST_32 a){return a<0?a+MOD:a;}static _6 _5 INTM_FAST_32 _1(INTM_FAST_32 a){return a>=MOD?a-MOD:a;}template<class IntType>static _6 _4 INTM_FAST_32 _2(INTM_FAST_32 a,IntType b){INTM_FAST_32 res=1;for(;b;b>>=1){if(b&1){res=static_cast<INTM_FAST_32>((INTM_FAST_64)(res)*(INTM_FAST_64)(a)%MOD);}a=static_cast<INTM_FAST_32>((INTM_FAST_64)(a)*(INTM_FAST_64)(a)%MOD);}return res;}static int pretty(int x){if(x>=MOD-1000)return x-MOD;return x;}public:
#if __cplusplus >= 201103L
intm()=default;
#else
intm(){}
#endif
static intm raw(INTM_FAST_32 x){return intm(x,0);}_6 _5 intm(int a):a(static_cast<INTM_FAST_32>(_3(a%MOD))){}_6 _5 intm(long a):a(static_cast<INTM_FAST_32>(_3(a%MOD))){}_6 _5 intm(long long a):a(static_cast<INTM_FAST_32>(_3(a%MOD))){}_6 _5 intm(unsigned int a):a(static_cast<INTM_FAST_32>(a%MOD)){}_6 _5 intm(unsigned long a):a(static_cast<INTM_FAST_32>(a%MOD)){}_6 _5 intm(unsigned long long a):a(static_cast<INTM_FAST_32>(a%MOD)){}template<class _7>_6 _5 CXX11_EXPLICIT operator _7()const{return a;}_6 friend std::ostream&operator<<(std::ostream&out,const intm rhs){
#ifdef CM_DEBUG
out<<pretty(rhs.a);return out;
#else
out<<rhs.a;return out;
#endif
}_6 friend std::istream&operator>>(std::istream&in,intm&rhs){long long a;in>>a;rhs=intm(a);return in;}template<class _7>_6 _4 intm pow(_7 k)const{return raw(_2(a,k));}_6 _4 intm inv()const{
#ifdef CM_DEBUG_H
cm_assert(a!=0,"warning:0 do not have inv");
#endif
return raw(_2(a,MOD-2));}_6 _5 friend bool operator<(const intm a,const intm b){return a.a<b.a;}_6 _5 friend bool operator<=(const intm a,const intm b){return a.a<=b.a;}_6 _5 friend bool operator>(const intm a,const intm b){return a.a>b.a;}_6 _5 friend bool operator>=(const intm a,const intm b){return a.a>=b.a;}_6 _5 friend bool operator==(const intm a,const intm b){return a.a==b.a;}_6 _5 friend bool operator!=(const intm a,const intm b){return a.a!=b.a;}template<class _7>_6 _5 friend bool operator<(const _7 a,const intm b){return a<b.a;}template<class _7>_6 _5 friend bool operator<(const intm a,const _7 b){return a.a<b;}template<class _7>_6 _5 friend bool operator<=(const _7 a,const intm b){return a<=b.a;}template<class _7>_6 _5 friend bool operator<=(const intm a,const _7 b){return a.a<=b;}template<class _7>_6 _5 friend bool operator>(const _7 a,const intm b){return a>b.a;}template<class _7>_6 _5 friend bool operator>(const intm a,const _7 b){return a.a>b;}template<class _7>_6 _5 friend bool operator>=(const _7 a,const intm b){return a>=b.a;}template<class _7>_6 _5 friend bool operator>=(const intm a,const _7 b){return a.a>=b;}template<class _7>_6 _5 friend bool operator==(const _7 a,const intm b){return a==b.a;}template<class _7>_6 _5 friend bool operator==(const intm a,const _7 b){return a.a==b;}template<class _7>_6 _5 friend bool operator!=(const _7 a,const intm b){return a!=b.a;}template<class _7>_6 _5 friend bool operator!=(const intm a,const _7 b){return a.a!=b;}_6 _5 friend intm operator+(const intm a,const intm b){return raw(_1(a.a+b.a));}_6 _5 friend intm operator-(const intm a,const intm b){return raw(_3(a.a-b.a));}_6 _5 friend intm operator*(const intm a,const intm b){return raw(static_cast<INTM_FAST_32>((INTM_FAST_64)(a.a)*(INTM_FAST_64)(b.a)%MOD));}_6 _4 friend intm operator/(const intm a,const intm b){return a*b.inv();}_6 _5 friend intm&operator+=(intm&a,const intm b){return a=a+b;}_6 _5 friend intm&operator-=(intm&a,const intm b){return a=a-b;}_6 _5 friend intm&operator*=(intm&a,const intm b){return a=a*b;}_6 _4 friend intm&operator/=(intm&a,const intm b){return a=a/b;}template<class _7>_6 _5 friend intm operator+(const intm a,const _7 b){return a+intm(b);}template<class _7>_6 _5 friend intm operator-(const intm a,const _7 b){return a-intm(b);}template<class _7>_6 _5 friend intm operator*(const intm a,const _7 b){return a*intm(b);}template<class _7>_6 _4 friend intm operator/(const intm a,const _7 b){return a/intm(b);}template<class _7>_6 _5 friend intm&operator+=(intm&a,const _7 b){return a+=intm(b);}template<class _7>_6 _5 friend intm&operator-=(intm&a,const _7 b){return a-=intm(b);}template<class _7>_6 _5 friend intm&operator*=(intm&a,const _7 b){return a*=intm(b);}template<class _7>_6 _4 friend intm&operator/=(intm&a,const _7 b){return a/=intm(b);}template<class _7>_6 _5 friend intm operator+(const _7 a,const intm b){return intm(a)+b;}template<class _7>_6 _5 friend intm operator-(const _7 a,const intm b){return intm(a)-b;}template<class _7>_6 _5 friend intm operator*(const _7 a,const intm b){return intm(a)*b;}template<class _7>_6 _4 friend intm operator/(const _7 a,const intm b){return intm(a)/b;}template<class _7>_6 _5 friend _7&operator+=(_7&a,const intm b){return a+=_7(b);}template<class _7>_6 _5 friend _7&operator-=(_7&a,const intm b){return a-=_7(b);}template<class _7>_6 _5 friend _7&operator*=(_7&a,const intm b){return a*=_7(b);}template<class _7>_6 _4 friend _7&operator/=(_7&a,const intm b){return a/=_7(b);}};}
#undef _6
#undef _5
#undef _4
#undef INTM_FAST_32
#undef INTM_FAST_64
#endif
