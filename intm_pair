#ifndef CM_INTM_PAIR_H
#define CM_INTM_PAIR_H
#include <iostream>
#include <type_traits>
namespace cm{template<class _3,class _4>struct intm_pair{_3 first;_4 second;intm_pair()=default;intm_pair(_3 first,_4 second):first(first),second(second){}template<class IntType,typename=typename std::enable_if<std::is_integral<IntType>::value>::type>intm_pair(IntType x):first(x),second(x){}auto operator+(const intm_pair&_5)const->decltype(make_intm_pair(first+_5.first,second+_5.second));auto operator-(const intm_pair&_5)const->decltype(make_intm_pair(first-_5.first,second-_5.second));auto operator*(const intm_pair&_5)const->decltype(make_intm_pair(first*_5.first,second*_5.second));auto operator/(const intm_pair&_5)const->decltype(make_intm_pair(first/_5.first,second/_5.second));template<class _2>auto pow(_2 k)const->decltype(make_intm_pair(first.pow(k),second.pow(k)));auto inv()const->decltype(make_intm_pair(first.inv(),second.inv()));};template<class _3,class _4>intm_pair<_3,_4>make_intm_pair(_3 first,_4 second){return intm_pair<_3,_4>(first,second);}template<class _3,class _4>auto intm_pair<_3,_4>::operator+(const intm_pair&_5)const->decltype(make_intm_pair(first+_5.first,second+_5.second)){return make_intm_pair(first+_5.first,second+_5.second);}template<class _3,class _4>auto intm_pair<_3,_4>::operator-(const intm_pair&_5)const->decltype(make_intm_pair(first-_5.first,second-_5.second)){return make_intm_pair(first-_5.first,second-_5.second);}template<class _3,class _4>auto intm_pair<_3,_4>::operator*(const intm_pair&_5)const->decltype(make_intm_pair(first*_5.first,second*_5.second)){return make_intm_pair(first*_5.first,second*_5.second);}template<class _3,class _4>auto intm_pair<_3,_4>::operator/(const intm_pair&_5)const->decltype(make_intm_pair(first/_5.first,second/_5.second)){return make_intm_pair(first/_5.first,second/_5.second);}template<class _3,class _4>std::ostream&operator<<(std::ostream&_1,intm_pair<_3,_4>_5){_1<<"("<<_5.first<<","<<_5.second<<")";return _1;}template<class _3,class _4>template<class _2>auto intm_pair<_3,_4>::pow(_2 k)const->decltype(make_intm_pair(first.pow(k),second.pow(k))){return make_intm_pair(first.pow(k),second.pow(k));}template<class _3,class _4>auto intm_pair<_3,_4>::inv()const->decltype(make_intm_pair(first.inv(),second.inv())){return make_intm_pair(first.inv(),second.inv());}}
#endif
