#ifndef CM_INTM_PAIR_H
#define CM_INTM_PAIR_H
#include <iostream>
#include <type_traits>
namespace cm{template<class _2,class _3>struct intm_pair{_2 first;_3 second;intm_pair()=default;intm_pair(_2 first,_3 second):first(first),second(second){}template<class IntType,typename=typename std::enable_if<std::is_integral<IntType>::value>::type>intm_pair(IntType x):first(x),second(x){}auto operator+(const intm_pair&_4)const->decltype(make_intm_pair(first+_4.first,second+_4.second));auto operator-(const intm_pair&_4)const->decltype(make_intm_pair(first-_4.first,second-_4.second));auto operator*(const intm_pair&_4)const->decltype(make_intm_pair(first*_4.first,second*_4.second));auto operator/(const intm_pair&_4)const->decltype(make_intm_pair(first/_4.first,second/_4.second));};template<class _2,class _3>intm_pair<_2,_3>make_intm_pair(_2 first,_3 second){return intm_pair<_2,_3>(first,second);}template<class _2,class _3>auto intm_pair<_2,_3>::operator+(const intm_pair&_4)const->decltype(make_intm_pair(first+_4.first,second+_4.second)){return make_intm_pair(first+_4.first,second+_4.second);}template<class _2,class _3>auto intm_pair<_2,_3>::operator-(const intm_pair&_4)const->decltype(make_intm_pair(first-_4.first,second-_4.second)){return make_intm_pair(first-_4.first,second-_4.second);}template<class _2,class _3>auto intm_pair<_2,_3>::operator*(const intm_pair&_4)const->decltype(make_intm_pair(first*_4.first,second*_4.second)){return make_intm_pair(first*_4.first,second*_4.second);}template<class _2,class _3>auto intm_pair<_2,_3>::operator/(const intm_pair&_4)const->decltype(make_intm_pair(first/_4.first,second/_4.second)){return make_intm_pair(first/_4.first,second/_4.second);}template<class _2,class _3>std::ostream&operator<<(std::ostream&_1,intm_pair<_2,_3>_4){_1<<"("<<_4.first<<","<<_4.second<<")";return _1;}}
#endif
