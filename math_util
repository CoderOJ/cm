#ifndef CM_MATH_BASE_H
#define CM_MATH_BASE_H
#include "./debug"
#include <algorithm>
#include <vector>
namespace cm{template<class _9>struct math_util{static class _1{private:std::vector<_9>_6;public:void require(int n){n++;int c=static_cast<int>(_6.size());if(c<n){_6.resize(n);if(c==0){_6[0]=1;c=1;}for(int i=c;i<n;i++){_6[i]=_6[i-1]*_9(i);}}}_9 operator()(int i)const{return _6[i];}_9 get(int i){require(i);return _6[i];}}fac;static class _2{private:std::vector<_9>_8;static constexpr int MOD=_9::MOD;public:void require(int n){n++;int c=static_cast<int>(_8.size());if(c<n){_8.resize(n);if(c==0){_8[0]=1;c=1;}if(c==1&&n>1){_8[1]=1;c=2;}for(int i=c;i<n;i++){_8[i]=_8[MOD%i]*(MOD-MOD/i);}}}_9 operator()(int i)const{return _8[i];}_9 get(int i){require(i);return _8[i];}}inv;static class _3{private:std::vector<_9>_7;public:void require(int n){fac.require(n);int c=static_cast<int>(_7.size());if(n+1>c){_7.resize(n+1);_7[n]=fac(n).inv();for(int i=n-1;i>=c;i--)_7[i]=_7[i+1]*_9(i+1);}}_9 operator()(int i)const{return _7[i];}_9 get(int i){require(i);return _7[i];}}ifac;static class _4{public:void require(int n){fac.require(n);ifac.require(n);}_9 operator()(int n,int m){if(m<0||m>n)return _9(0);return fac(n)*ifac(m)*ifac(n-m);}_9 get(int n,int m){if(m<0||m>n)return _9(0);return fac.get(n)*ifac.get(m)*ifac.get(n-m);}}binom;};template<class _9>typename math_util<_9>::_1 math_util<_9>::fac;template<class _9>typename math_util<_9>::_2 math_util<_9>::inv;template<class _9>typename math_util<_9>::_3 math_util<_9>::ifac;template<class _9>typename math_util<_9>::_4 math_util<_9>::binom;int clz(int x){cm_assert(x!=0);return __builtin_clz(x);}int clz(long x){cm_assert(x!=0);return __builtin_clzl(x);}int clz(long long x){cm_assert(x!=0);return __builtin_clzll(x);}unsigned int clz(unsigned int x){cm_assert(x!=0);return __builtin_clz(x);}unsigned int clz(unsigned long x){cm_assert(x!=0);return __builtin_clzl(x);}unsigned int clz(unsigned long long x){cm_assert(x!=0);return __builtin_clzll(x);}int ctz(int x){cm_assert(x!=0);return __builtin_ctz(x);}int ctz(long x){cm_assert(x!=0);return __builtin_ctzl(x);}int ctz(long long x){cm_assert(x!=0);return __builtin_ctzll(x);}unsigned int ctz(unsigned int x){cm_assert(x!=0);return __builtin_ctz(x);}unsigned int ctz(unsigned long x){cm_assert(x!=0);return __builtin_ctzl(x);}unsigned int ctz(unsigned long long x){cm_assert(x!=0);return __builtin_ctzll(x);}template<class _5>_5 gcd(_5 a,_5 b){cm_assert(a>=0);cm_assert(b>=0);if(a==0)return b;if(b==0)return a;int az=ctz(a);int bz=ctz(b);int sh=std::min(az,bz);b>>=bz;while(true){a>>=az;if(a==b)return a<<sh;_5 diff=a-b;_5 va=a>b?diff:-diff;_5 vb=std::min(a,b);az=ctz(diff);a=va;b=vb;}return b<<sh;}}
#endif
