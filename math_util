#ifndef CM_MATH_BASE_H
#define CM_MATH_BASE_H
#include "./debug"
#include <algorithm>
#include <vector>
namespace cm{template<class _b>struct math_util{static class _1{private:std::vector<_b>_8;public:void require(int n){n++;int c=static_cast<int>(_8.size());if(c<n){_8.resize(n);if(c==0){_8[0]=1;c=1;}for(int i=c;i<n;i++){_8[i]=_8[i-1]*_b(i);}}}_b operator()(int i)const{return _8[i];}_b get(int i){require(i);return _8[i];}}fac;static class _2{private:std::vector<_b>_a;static constexpr int MOD=_b::MOD;public:void require(int n){n++;int c=static_cast<int>(_a.size());if(c<n){_a.resize(n);if(c==0){_a[0]=1;c=1;}if(c==1&&n>1){_a[1]=1;c=2;}for(int i=c;i<n;i++){_a[i]=_a[MOD%i]*(MOD-MOD/i);}}}_b operator()(int i)const{return _a[i];}_b get(int i){require(i);return _a[i];}}inv;static class _3{private:std::vector<_b>_9;public:void require(int n){fac.require(n);int c=static_cast<int>(_9.size());if(n+1>c){_9.resize(n+1);_9[n]=fac(n).inv();for(int i=n-1;i>=c;i--)_9[i]=_9[i+1]*_b(i+1);}}_b operator()(int i)const{return _9[i];}_b get(int i){require(i);return _9[i];}}ifac;static class _4{public:void require(int n){fac.require(n);ifac.require(n);}_b operator()(int n,int m){if(m<0||m>n)return _b(0);return fac(n)*ifac(m)*ifac(n-m);}_b get(int n,int m){if(m<0||m>n)return _b(0);return fac.get(n)*ifac.get(m)*ifac.get(n-m);}}binom;};template<class _b>typename math_util<_b>::_1 math_util<_b>::fac;template<class _b>typename math_util<_b>::_2 math_util<_b>::inv;template<class _b>typename math_util<_b>::_3 math_util<_b>::ifac;template<class _b>typename math_util<_b>::_4 math_util<_b>::binom;int clz(int x){cm_assert(x!=0);return __builtin_clz(x);}int clz(long x){cm_assert(x!=0);return _5(x);}int clz(long long x){cm_assert(x!=0);return __builtin_clzll(x);}unsigned int clz(unsigned int x){cm_assert(x!=0);return __builtin_clz(x);}unsigned int clz(unsigned long x){cm_assert(x!=0);return _5(x);}unsigned int clz(unsigned long long x){cm_assert(x!=0);return __builtin_clzll(x);}int ctz(int x){cm_assert(x!=0);return __builtin_ctz(x);}int ctz(long x){cm_assert(x!=0);return _6(x);}int ctz(long long x){cm_assert(x!=0);return __builtin_ctzll(x);}unsigned int ctz(unsigned int x){cm_assert(x!=0);return __builtin_ctz(x);}unsigned int ctz(unsigned long x){cm_assert(x!=0);return _6(x);}unsigned int ctz(unsigned long long x){cm_assert(x!=0);return __builtin_ctzll(x);}template<class _7>_7 gcd(_7 a,_7 b){cm_assert(a>=0);cm_assert(b>=0);cm::impl::cm_logger.assert_push_disable();if(a==0)return b;if(b==0)return a;int az=ctz(a);int bz=ctz(b);int sh=std::min(az,bz);b>>=bz;while(a!=0){a>>=az;_7 diff=a-b;_7 va=a>b?diff:-diff;_7 vb=std::min(a,b);a=va;b=vb;
#ifdef CM_DEBUG
az=diff==0?0:ctz(diff);
#else
az=ctz(diff);
#endif
}cm::impl::cm_logger.assert_push_enable();return b<<sh;}}
#endif
